#!/bin/sh

SNIPER_ROOT=""
DCOP_ROOT=""

cores="6"
simdir="/var/tmp/snipersim"
purge="false"

OPTIND=1

function show_usage {
	echo ""
	echo "usage:"
	echo ""
	echo "run-dcop [OPTIONS] [[--] ARGUMENTS]"
	echo ""
	echo "OPTIONS:"
	echo "	-h"
	echo "		show this message and exit"
	echo ""
	echo "	-n CORES"
	echo "		run sniper simulation with number of CORES (default: 6)"
	echo ""
	echo "	-s DIR"
	echo "		dump sniper output into DIR (default: /var/tmp/snipersim)"
	echo ""
	echo "	-d"
	echo "		enable sniper appdebug feature"
	echo ""
	echo "	-a"
	echo "		run dcop as a standalone application"
	echo ""
	echo "	-v"
	echo "		run dcop in valgrind"
	echo ""
	echo "	-g"
	echo "		run dcop in gdb"
	echo ""
	echo "	-p"
	echo "		delete simulation output"
	echo ""
	echo "ARGUMENTS:"
	echo "	arguments passed to dcop (see dcop --help for more information)"
	echo ""
}

if [[ "$#" -eq 0 ]]; then
	show_usage
	exit 0
fi

while getopts "n:s:davghp" opt; do
	case "$opt" in
		h)
			show_usage
			exit 0
			;;
		n)
			cores="$OPTARG"
			;;
		s)
			simdir=`echo "$OPTARG" | sed -e 's/\/$//'`
			;;
		d)
			debug="--appdebug"
			;;
		a)
			mode="standalone"
			;;
		v)
			mode="valgrind"
			;;
		g)
			mode="gdb"
			;;
		p)
			purge="true"
			;;
	esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [[ "$mode" = "standalone" ]]; then
	time $DCOP_ROOT/dcop $*
elif [[ "$mode" = "valgrind" ]]; then
	valgrind --leak-check=full --show-reachable=yes $DCOP_ROOT/dcop $*
elif [[ "$mode" = "gdb" ]]; then
	gdb -ex "set args $*" -ex "run" $DCOP_ROOT/dcop
else
	simdir="$simdir/`date +%m-%d-%H:%M`"
	$SNIPER_ROOT/run-sniper -n $cores -d $simdir --roi --no-cache-warming --viz $debug -- $DCOP_ROOT/dcop $*
	$SNIPER_ROOT/tools/cpistack.py -d $simdir -o $simdir/cpi-stack
	$SNIPER_ROOT/tools/cpistack.py --simplified -d $simdir -o $simdir/cpi-stack-simple
	if [[ $purge == "true" ]]; then
		echo "run-dcop: purging simulation output at $simdir"
		rm -r $simdir
	fi
fi

